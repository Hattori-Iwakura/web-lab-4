@model web_lab_4.Models.Dashboard.DashboardViewModel
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<!-- System Alerts Container -->
<div id="systemAlerts"></div>

<!-- Dashboard Header -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">
        <i class="fas fa-tachometer-alt text-primary"></i> Dashboard
    </h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="refreshDashboard()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="exportReport('revenue')">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>
</div>

<!-- Stats Cards Row -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-start border-primary border-4 shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col me-2">
                        <div class="text-xs fw-bold text-primary text-uppercase mb-1">
                            Total Products</div>
                        <div class="h5 mb-0 fw-bold text-gray-800" id="totalProducts">@(Model?.TotalProducts ?? 0)</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-box fa-2x text-secondary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-start border-success border-4 shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col me-2">
                        <div class="text-xs fw-bold text-success text-uppercase mb-1">
                            Monthly Revenue</div>
                        <div class="h5 mb-0 fw-bold text-gray-800" id="monthlyRevenue">@((Model?.MonthlyRevenue ?? 0).ToString("C"))</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-dollar-sign fa-2x text-secondary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-start border-info border-4 shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col me-2">
                        <div class="text-xs fw-bold text-info text-uppercase mb-1">
                            Total Orders</div>
                        <div class="h5 mb-0 fw-bold text-gray-800" id="totalOrders">@(Model?.TotalOrders ?? 0)</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-shopping-cart fa-2x text-secondary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-start border-warning border-4 shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col me-2">
                        <div class="text-xs fw-bold text-warning text-uppercase mb-1">
                            Pending Orders</div>
                        <div class="h5 mb-0 fw-bold text-gray-800" id="pendingOrders">@(Model?.PendingOrders ?? 0)</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-clock fa-2x text-secondary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row">
    <div class="col-xl-8 col-lg-7">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 fw-bold text-primary">Sales Overview</h6>
                <div class="dropdown no-arrow">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown">
                        <i class="fas fa-calendar"></i> Period
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="loadSalesChart('week')">This Week</a></li>
                        <li><a class="dropdown-item" href="#" onclick="loadSalesChart('month')">This Month</a></li>
                        <li><a class="dropdown-item" href="#" onclick="loadSalesChart('year')">This Year</a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body">
                <div class="chart-area">
                    <canvas id="salesChart" style="height: 320px;"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-4 col-lg-5">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 fw-bold text-primary">Order Status</h6>
            </div>
            <div class="card-body">
                <div class="chart-pie pt-4 pb-2">
                    <canvas id="orderStatusChart" style="height: 245px;"></canvas>
                </div>
                <div class="mt-4 text-center small">
                    <span class="me-2">
                        <i class="fas fa-circle text-success"></i> Completed
                    </span>
                    <span class="me-2">
                        <i class="fas fa-circle text-primary"></i> Processing
                    </span>
                    <span class="me-2">
                        <i class="fas fa-circle text-warning"></i> Pending
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Orders and Quick Actions Row -->
<div class="row">
    <div class="col-lg-6 mb-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 fw-bold text-primary">Recent Orders</h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody id="recentOrdersTable">
                            @if (Model?.RecentOrders?.Any() == true)
                            {
                                @foreach (var order in Model.RecentOrders)
                                {
                                    <tr>
                                        <td><a asp-area="Admin" asp-controller="Order" asp-action="Details" asp-route-id="@order.Id">#@order.Id</a></td>
                                        <td>@order.CustomerName</td>
                                        <td>@order.Amount.ToString("C")</td>
                                        <td><span class="badge bg-@(GetStatusClass(order.Status))">@order.Status</span></td>
                                        <td>@order.Date.ToString("MMM dd, yyyy")</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center text-muted">Loading recent orders...</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6 mb-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 fw-bold text-primary">Quick Actions</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <a asp-area="Admin" asp-controller="Product" asp-action="Add" class="btn btn-primary w-100">
                            <i class="fas fa-plus"></i> Add Product
                        </a>
                    </div>
                    <div class="col-md-6 mb-3">
                        <a asp-area="Admin" asp-controller="Category" asp-action="Add" class="btn btn-info w-100">
                            <i class="fas fa-folder-plus"></i> Add Category
                        </a>
                    </div>
                    <div class="col-md-6 mb-3">
                        <a asp-area="Admin" asp-controller="Order" asp-action="Index" class="btn btn-warning w-100">
                            <i class="fas fa-list"></i> Manage Orders
                        </a>
                    </div>
                    <div class="col-md-6 mb-3">
                        <a asp-area="Admin" asp-controller="User" asp-action="Index" class="btn btn-secondary w-100">
                            <i class="fas fa-users"></i> Manage Users
                        </a>
                    </div>
                </div>

                <!-- Low Stock Alerts -->
                <div class="mt-4">
                    <h6 class="fw-bold text-danger">Low Stock Alerts</h6>
                    <div id="lowStockAlerts">
                        @if (Model?.LowStockProducts?.Any() == true)
                        {
                            @foreach (var product in Model.LowStockProducts.Take(5))
                            {
                                <div class="alert @(product.IsExpired ? "alert-danger" : "alert-warning") alert-sm py-2 mb-2">
                                    <i class="fas @(product.IsExpired ? "fa-exclamation-circle" : "fa-exclamation-triangle")"></i>
                                    <strong>@product.Name</strong> - @product.Stock left
                                    @if (product.IsExpired)
                                    {
                                        <span class="text-danger">(EXPIRED)</span>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted"><i class="fas fa-spinner fa-spin"></i> Loading alerts...</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Top Products Row -->
<div class="row">
    <div class="col-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 fw-bold text-primary">Top Selling Products</h6>
            </div>
            <div class="card-body">
                <div class="row" id="topProductsContainer">
                    @if (Model?.TopProducts?.Any() == true)
                    {
                        @foreach (var product in Model.TopProducts)
                        {
                            <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                                <div class="card border-start border-success border-3 h-100">
                                    <div class="card-body">
                                        <div class="row no-gutters align-items-center">
                                            <div class="col">
                                                <div class="text-xs fw-bold text-success text-uppercase mb-1">
                                                    @product.Name
                                                </div>
                                                <div class="h6 mb-0 fw-bold text-gray-800">
                                                    @product.SalesCount sold
                                                </div>
                                                <div class="text-xs text-muted">
                                                    @product.Revenue.ToString("C") revenue
                                                </div>
                                                <div class="text-xs text-muted">
                                                    @product.Category
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12 text-center text-muted">
                            <i class="fas fa-box fa-2x mb-2"></i>
                            <p>No sales data available</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        $(document).ready(function() {
            console.log('Dashboard initializing...');
            initializeCharts();
            loadSalesChart();
            loadDashboardData();
            
            // Auto-refresh every 5 minutes
            setInterval(function() {
                loadDashboardData();
                loadSalesChart();
            }, 300000);
        });

        function loadDashboardData() {
            console.log('Loading dashboard data...');
            $.ajax({
                url: '@Url.Action("GetDashboardStats", "Home")',
                type: 'GET',
                success: function(response) {
                    console.log('Dashboard response:', response);
                    if (response.success) {
                        // Update main stats
                        $('#totalProducts').text(response.totalProducts || 0);
                        $('#totalOrders').text(response.totalOrders || 0);
                        $('#monthlyRevenue').text('$' + (response.monthlyRevenue || 0).toLocaleString('en-US', {minimumFractionDigits: 2}));
                        $('#pendingOrders').text(response.pendingOrders || 0);
                        
                        // Load detailed data
                        loadRecentOrders(response.recentOrders);
                        loadTopProducts(response.topProducts);
                        loadLowStockAlerts(response.lowStockProducts);
                        updateOrderStatusChart(response.orderStatusSummary);
                        
                        // Update alerts
                        updateSystemAlerts(response);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading dashboard data:', error);
                    console.error('Response:', xhr.responseText);
                    
                    // Show error in UI
                    $('#systemAlerts').html(`
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle"></i> Error loading dashboard data: ${error}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    `);
                }
            });
        }

        function loadSalesChart(period = 'year') {
            $.ajax({
                url: '@Url.Action("GetSalesChart", "Home")',
                type: 'GET',
                data: { period: period },
                success: function(response) {
                    if (response.success) {
                        updateSalesChart(response.labels, response.data);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading sales chart data:', error);
                }
            });
        }

        function updateSalesChart(labels, data) {
            const salesCtx = document.getElementById('salesChart').getContext('2d');
            
            if (window.salesChart) {
                window.salesChart.destroy();
            }
            
            window.salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Sales ($)',
                        data: data,
                        borderColor: 'rgb(78, 115, 223)',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateOrderStatusChart(statusData) {
            const orderCtx = document.getElementById('orderStatusChart').getContext('2d');
            
            if (window.orderChart) {
                window.orderChart.destroy();
            }
            
            window.orderChart = new Chart(orderCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Completed', 'Processing', 'Pending', 'Cancelled', 'Shipped', 'Delivered'],
                    datasets: [{
                        data: [
                            statusData.completed || 0,
                            statusData.processing || 0,
                            statusData.pending || 0,
                            statusData.cancelled || 0,
                            statusData.shipped || 0,
                            statusData.delivered || 0
                        ],
                        backgroundColor: [
                            '#1cc88a', // Completed - Green
                            '#36b9cc', // Processing - Blue
                            '#f6c23e', // Pending - Yellow
                            '#e74a3b', // Cancelled - Red
                            '#858796', // Shipped - Gray
                            '#5a5c69'  // Delivered - Dark Gray
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    cutout: '80%'
                }
            });
        }

        function loadRecentOrders(orders) {
            const tbody = $('#recentOrdersTable');
            tbody.empty();
            
            if (orders && orders.length > 0) {
                orders.forEach(function(order) {
                    const statusClass = getStatusClass(order.status);
                    const row = `
                        <tr>
                            <td><a href="/Admin/Order/Details/${order.id}">#${order.id}</a></td>
                            <td>${order.customerName}</td>
                            <td>$${order.amount.toFixed(2)}</td>
                            <td><span class="badge bg-${statusClass}">${order.status}</span></td>
                            <td>${new Date(order.date).toLocaleDateString()}</td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            } else {
                tbody.html('<tr><td colspan="5" class="text-center text-muted">No recent orders</td></tr>');
            }
        }

        function loadTopProducts(products) {
            const container = $('#topProductsContainer');
            container.empty();
            
            if (products && products.length > 0) {
                products.forEach(function(product) {
                    const productCard = `
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
                            <div class="card border-start border-success border-3 h-100">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col">
                                            <div class="text-xs fw-bold text-success text-uppercase mb-1">
                                                ${product.name}
                                            </div>
                                            <div class="h6 mb-0 fw-bold text-gray-800">
                                                ${product.salesCount} sold
                                            </div>
                                            <div class="text-xs text-muted">
                                                $${product.revenue.toFixed(2)} revenue
                                            </div>
                                            <div class="text-xs text-muted">
                                                ${product.category}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    container.append(productCard);
                });
            } else {
                container.html(`
                    <div class="col-12 text-center text-muted">
                        <i class="fas fa-box fa-2x mb-2"></i>
                        <p>No sales data available</p>
                    </div>
                `);
            }
        }

        function loadLowStockAlerts(products) {
            const container = $('#lowStockAlerts');
            container.empty();
            
            if (products && products.length > 0) {
                products.slice(0, 5).forEach(function(product) {
                    const alertClass = product.isExpired ? 'alert-danger' : 'alert-warning';
                    const icon = product.isExpired ? 'fa-exclamation-circle' : 'fa-exclamation-triangle';
                    const alert = `
                        <div class="alert ${alertClass} alert-sm py-2 mb-2">
                            <i class="fas ${icon}"></i>
                            <strong>${product.name}</strong> - ${product.stock} left
                            ${product.isExpired ? '<span class="text-danger">(EXPIRED)</span>' : ''}
                        </div>
                    `;
                    container.append(alert);
                });
            } else {
                container.html('<p class="text-success"><i class="fas fa-check"></i> All products in stock</p>');
            }
        }

        function updateSystemAlerts(data) {
            let alerts = [];
            
            if (data.lowStockCount > 0) {
                alerts.push(`${data.lowStockCount} products are low in stock`);
            }
            
            if (data.expiredProductsCount > 0) {
                alerts.push(`${data.expiredProductsCount} products have expired`);
            }
            
            if (data.pendingOrders > 10) {
                alerts.push(`${data.pendingOrders} orders are pending (high volume)`);
            }
            
            // Display alerts if any
            if (alerts.length > 0) {
                const alertContainer = $('#systemAlerts');
                const alertHtml = alerts.map(alert => 
                    `<div class="alert alert-warning alert-dismissible fade show" role="alert">
                        <i class="fas fa-exclamation-triangle"></i> ${alert}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>`
                ).join('');
                
                alertContainer.html(alertHtml);
            }
        }

        function getStatusClass(status) {
            switch(status.toLowerCase()) {
                case 'completed': return 'success';
                case 'processing': return 'primary';
                case 'pending': return 'warning';
                case 'cancelled': return 'danger';
                case 'shipped': return 'info';
                case 'delivered': return 'success';
                default: return 'secondary';
            }
        }

        function initializeCharts() {
            // Initialize with loading state
            const salesCtx = document.getElementById('salesChart').getContext('2d');
            window.salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: ['Loading...'],
                    datasets: [{
                        label: 'Sales ($)',
                        data: [0],
                        borderColor: 'rgb(78, 115, 223)',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            const orderCtx = document.getElementById('orderStatusChart').getContext('2d');
            window.orderChart = new Chart(orderCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Loading...'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#dddddd']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '80%'
                }
            });
        }

        // Manual refresh function
        function refreshDashboard() {
            loadDashboardData();
            loadSalesChart();
        }

        // Export functionality
        function exportReport(type) {
            window.location.href = `@Url.Action("ExportReport", "Home")?type=${type}&format=csv`;
        }
    </script>
}

@section Styles {
    <style>
        .border-start {
            border-left: 0.25rem solid !important;
        }
        .text-gray-800 {
            color: #5a5c69 !important;
        }
        .alert-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
        .fw-bold {
            font-weight: 700 !important;
        }
    </style>
}

@functions {
    private string GetStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "completed" => "success",
            "processing" => "primary",
            "pending" => "warning",
            "cancelled" => "danger",
            "shipped" => "info",
            "delivered" => "success",
            _ => "secondary"
        };
    }
}
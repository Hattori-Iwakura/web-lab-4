@* filepath: c:\Users\ASUS\Desktop\web-lab-4\Areas\Admin\Views\User\Details.cshtml *@
@model web_lab_4.Models.UserDetailsViewModel

@{
    ViewData["Title"] = $"User Details - {Model.UserName}";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">
        <i class="fas fa-user"></i> User Details
    </h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <a asp-action="Index" class="btn btn-outline-secondary me-2">
            <i class="fas fa-arrow-left"></i> Back to Users
        </a>
        <a asp-action="ManageRoles" asp-route-id="@Model.Id" class="btn btn-primary">
            <i class="fas fa-user-cog"></i> Manage Roles
        </a>
    </div>
</div>

<div class="row">
    <!-- User Information -->
    <div class="col-lg-8">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-user-circle"></i> User Information
                </h6>
            </div>
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6>Basic Information</h6>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <td><strong>User ID:</strong></td>
                                <td>@Model.Id</td>
                            </tr>
                            <tr>
                                <td><strong>Username:</strong></td>
                                <td>@Model.UserName</td>
                            </tr>
                            <tr>
                                <td><strong>Email:</strong></td>
                                <td>
                                    @Model.Email
                                    @if (Model.EmailConfirmed)
                                    {
                                        <span class="badge bg-success ms-2">Confirmed</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark ms-2">Unconfirmed</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td><strong>Phone:</strong></td>
                                <td>
                                    @(Model.PhoneNumber ?? "Not provided")
                                    @if (Model.PhoneNumberConfirmed)
                                    {
                                        <span class="badge bg-success ms-2">Confirmed</span>
                                    }
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6>Security Information</h6>
                        <table class="table table-borderless table-sm">
                            <tr>
                                <td><strong>Two-Factor:</strong></td>
                                <td>
                                    @if (Model.TwoFactorEnabled)
                                    {
                                        <span class="badge bg-success">Enabled</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Disabled</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td><strong>Account Status:</strong></td>
                                <td>
                                    @if (Model.LockoutEnd.HasValue && Model.LockoutEnd > DateTimeOffset.Now)
                                    {
                                        <span class="badge bg-danger">Locked until @Model.LockoutEnd.Value.ToString("MMM dd, yyyy")</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td><strong>Failed Logins:</strong></td>
                                <td>
                                    @Model.AccessFailedCount
                                    @if (Model.AccessFailedCount > 0)
                                    {
                                        <span class="text-warning ms-2">
                                            <i class="fas fa-exclamation-triangle"></i>
                                        </span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td><strong>Lockout Enabled:</strong></td>
                                <td>
                                    @if (Model.LockoutEnabled)
                                    {
                                        <span class="badge bg-success">Yes</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>

                <!-- User Roles -->
                <div class="mb-4">
                    <h6>Assigned Roles</h6>
                    @if (Model.Roles.Any())
                    {
                        @foreach (var role in Model.Roles)
                        {
                            <span class="badge bg-primary me-2">@role</span>
                        }
                    }
                    else
                    {
                        <span class="badge bg-secondary">No roles assigned</span>
                    }
                </div>

                <!-- Recent Orders -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6>Recent Orders</h6>
                        <small class="text-muted">Showing last 10 orders</small>
                    </div>
                    
                    @if (((dynamic)Model.RecentOrders).Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <th>Order #</th>
                                        <th>Date</th>
                                        <th>Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (dynamic order in (dynamic)Model.RecentOrders)
                                    {
                                        <tr>
                                            <td>#@order.Id</td>
                                            <td>@((DateTime)order.OrderDate)</td>
                                            <td>@((decimal)order.TotalPrice)</td>
                                            <td>
                                                <span class="badge bg-@(order.Status == "Completed" ? "success" : order.Status == "Pending" ? "warning" : "primary")">
                                                    @order.Status
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No orders found for this user.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Actions & Statistics -->
    <div class="col-lg-4">
        <!-- Statistics -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-chart-bar"></i> User Statistics
                </h6>
            </div>
            <div class="card-body text-center">
                <div class="row">
                    <div class="col-6 border-end">
                        <div class="h4 text-primary">@Model.TotalOrders</div>
                        <small class="text-muted">Total Orders</small>
                    </div>
                    <div class="col-6">
                        <div class="h4 text-success">@Model.TotalSpent.ToString("C")</div>
                        <small class="text-muted">Total Spent</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-bolt"></i> Quick Actions
                </h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    @if (!Model.EmailConfirmed)
                    {
                        <button class="btn btn-success" onclick="confirmEmail('@Model.Id')">
                            <i class="fas fa-envelope-check"></i> Confirm Email
                        </button>
                    }

                    @if (Model.LockoutEnd.HasValue && Model.LockoutEnd > DateTimeOffset.Now)
                    {
                        <button class="btn btn-warning" onclick="toggleLock('@Model.Id', '@Model.UserName', false)">
                            <i class="fas fa-unlock"></i> Unlock User
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-warning" onclick="toggleLock('@Model.Id', '@Model.UserName', true)">
                            <i class="fas fa-lock"></i> Lock User
                        </button>
                    }

                    <button class="btn btn-info" onclick="resetPassword('@Model.Id', '@Model.UserName')">
                        <i class="fas fa-key"></i> Reset Password
                    </button>

                    <a asp-action="ManageRoles" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-user-cog"></i> Manage Roles
                    </a>

                    <hr>

                    <button class="btn btn-danger" onclick="deleteUser('@Model.Id', '@Model.UserName')">
                        <i class="fas fa-trash"></i> Delete User
                    </button>
                </div>
            </div>
        </div>

        <!-- Activity Log -->
        <div class="card shadow">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-history"></i> Recent Activity
                </h6>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker bg-primary"></div>
                        <div class="timeline-content">
                            <small class="text-muted">Account created</small>
                        </div>
                    </div>
                    
                    @if (Model.EmailConfirmed)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <small class="text-muted">Email confirmed</small>
                            </div>
                        </div>
                    }
                    
                    @if (Model.TotalOrders > 0)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-info"></div>
                            <div class="timeline-content">
                                <small class="text-muted">First order placed</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleLock(userId, userName, isActive) {
            const action = isActive ? 'lock' : 'unlock';
            const message = `Are you sure you want to ${action} user "${userName}"?`;
            
            if (confirm(message)) {
                performAction('@Url.Action("ToggleLock")', { id: userId });
            }
        }

        function confirmEmail(userId) {
            if (confirm('Confirm email for this user?')) {
                performAction('@Url.Action("ConfirmEmail")', { id: userId });
            }
        }

        function resetPassword(userId, userName) {
            if (confirm(`Reset password for "${userName}"? A new temporary password will be generated.`)) {
                performAction('@Url.Action("ResetPassword")', { id: userId }, false, true);
            }
        }

        function deleteUser(userId, userName) {
            if (confirm(`Are you sure you want to DELETE user "${userName}"? This action cannot be undone!`)) {
                if (confirm('This will permanently delete the user account. Are you absolutely sure?')) {
                    performAction('@Url.Action("Delete")', { id: userId }, true);
                }
            }
        }

        function performAction(url, data, redirectToIndex = false, showPassword = false) {
            // Show loading indicator
            const loadingToast = showToast('Processing...', 'info');

            $.ajax({
                url: url,
                type: 'POST',
                data: {
                    ...data,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    // Hide loading indicator
                    hideToast(loadingToast);

                    if (response.success) {
                        // Show success message
                        if (response.message) {
                            if (showPassword && response.newPassword) {
                                alert(`${response.message}\n\nNew Password: ${response.newPassword}\n\nPlease save this password and share it with the user securely.`);
                            } else {
                                showToast(response.message, 'success');
                            }
                        }

                        // Handle redirect or reload
                        if (response.redirect || redirectToIndex) {
                            setTimeout(() => {
                                window.location.href = '@Url.Action("Index")';
                            }, 1500);
                        } else {
                            setTimeout(() => {
                                location.reload();
                            }, 1500);
                        }
                    } else {
                        // Show error message
                        showToast(response.message || 'An error occurred while performing the action.', 'error');
                    }
                },
                error: function(xhr, status, error) {
                    // Hide loading indicator
                    hideToast(loadingToast);
                    
                    console.error('AJAX Error:', error);
                    console.error('Response:', xhr.responseText);
                    
                    let errorMessage = 'Error performing action. Please try again.';
                    
                    // Try to parse error response
                    try {
                        const errorResponse = JSON.parse(xhr.responseText);
                        if (errorResponse.message) {
                            errorMessage = errorResponse.message;
                        }
                    } catch (e) {
                        // Use default error message
                    }
                    
                    showToast(errorMessage, 'error');
                }
            });
        }

        // Toast notification functions
        function showToast(message, type = 'info') {
            const toastId = 'toast_' + Date.now();
            const toastClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';
            
            const toastHtml = `
                <div id="${toastId}" class="toast align-items-center text-white ${toastClass} border-0" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            $('body').append(toastHtml);
            
            const toastElement = new bootstrap.Toast(document.getElementById(toastId));
            toastElement.show();
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                hideToast(toastId);
            }, 5000);
            
            return toastId;
        }

        function hideToast(toastId) {
            const toastElement = document.getElementById(toastId);
            if (toastElement) {
                const toast = bootstrap.Toast.getInstance(toastElement);
                if (toast) {
                    toast.hide();
                }
                setTimeout(() => {
                    $(toastElement).remove();
                }, 500);
            }
        }

        // Add some visual feedback for buttons
        $(document).ready(function() {
            $('.btn').on('click', function() {
                const $btn = $(this);
                if (!$btn.hasClass('processing')) {
                    $btn.addClass('processing');
                    setTimeout(() => {
                        $btn.removeClass('processing');
                    }, 3000);
                }
            });
        });
    </script>
}

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding-left: 20px;
        }
        
        .timeline::before {
            content: '';
            position: absolute;
            left: 10px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e9ecef;
        }
        
        .timeline-item {
            position: relative;
            margin-bottom: 15px;
        }
        
        .timeline-marker {
            position: absolute;
            left: -15px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 0 0 2px #e9ecef;
        }
        
        .timeline-content {
            padding-left: 10px;
        }
        
        .border-end {
            border-right: 1px solid #dee2e6 !important;
        }

        .btn.processing {
            pointer-events: none;
            opacity: 0.6;
        }

        .toast {
            min-width: 300px;
        }
    </style>
}

@Html.AntiForgeryToken()